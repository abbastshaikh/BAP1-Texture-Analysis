"""
This script calculates the robust features according to several calculated
metrics of robustness.

INPUT: Path to folder for perturbation experiment, which contains CSV file with 
robustness metric values for each feature (as generated by getRobustnessMetrics.py). 
Thresholds for robustness are specified for each metric in the beginning of the 
script.

Additionally, input the path to the folder for the original feature extraction
experiment (non-perturbed images), to additionally filter out features with 
null values or zero variance.

OUTPUT: CSV file containing a list of features under each column, where each 
column name denotes the metrics used to select those features. File will be 
saved under the experiment folder containing the perturbed features.

The metrics applied include:
    No Metrics (i.e. Unfiltered)
    MFR and SDFR (+ Pearson)
    CMFR and CSDFR (+ Pearson)
    nRoA and Normalized Bias
    CCC
    ICC
    ICC Lower Bound
    ICC Upper Bound
    All Metrics (Intersection)

Written by Abbas Shaikh, Summer 2023
"""

import os
import pandas as pd
import numpy as np
from functools import reduce

originalPath = "D:\BAP1\Experiments\FeatureExtraction\FullFeatureExtraction"
perturbationPath = "D:\BAP1\Experiments\FeatureRobustness\Erosion"


### Preprocessing ###
# Loading robustness metrics, converting all infinite values to null
robustnessMetrics = pd.read_csv(os.path.join(perturbationPath, "robustnessMetrics.csv"))
robustnessMetrics.replace([np.inf, -np.inf], np.nan, inplace=True)

# Load original features
originalFeatures = pd.read_csv(os.path.join(originalPath, "features.csv")).drop(columns = "Case")

# Get features with zero variance (within tolerance)
tol = 1e-10
zeroVar = originalFeatures.var() < tol
zeroVar = zeroVar[zeroVar].index

# Get features with null values
nullVal = originalFeatures.isna().any(axis = 0)
nullVal = nullVal[nullVal].index

# Remove features with null values or zero variance and all shape features
robustnessMetrics = robustnessMetrics[~(robustnessMetrics["Feature"].isin(zeroVar.union(nullVal)) | robustnessMetrics["Feature"].str.contains("shape2D"))]


### Thresholds ###
thresholds = {
    "MFR": [0.8, 1.2],
    "SDFR": 0.2,
    "Pearson": 0.7,
    "Pearson P-value": 0.05,
    "CMFR": 0.2,
    "CSDFR": 0.2,
    "nRoA": 0.05,
    "Bias": [-0.05, 0.05],
    "CCC": 0.9,
    "ICC": 0.9
    }


### MFR and SDFR Robust Features ###
subset_MFR_SDFR = robustnessMetrics["Feature"][
    (thresholds["MFR"][0] < robustnessMetrics["MFR"]) & (robustnessMetrics["MFR"] < thresholds["MFR"][1]) &
    (robustnessMetrics["SDFR"] < thresholds["SDFR"]) & 
    (robustnessMetrics["Pearson"] > thresholds["Pearson"]) &
    (robustnessMetrics["Pearson_pval"] < thresholds["Pearson P-value"])
    ]

print("MFR, SDFR, and Pearson (" + str(thresholds["MFR"][0]) + " < MFR < " + str(thresholds["MFR"][1]) + \
      " and SDFR < " + str(thresholds["SDFR"]) + " and Pearson > " + str(thresholds["Pearson"]) + \
      " with p < " + str(thresholds["Pearson P-value"]) +"):", 
      len(subset_MFR_SDFR),
      "Features")

    
### CMFR and CSDFR Robust Features ###
subset_CMFR_CSDFR = robustnessMetrics["Feature"][
    (robustnessMetrics["CMFR"] < thresholds["CMFR"]) &
    (robustnessMetrics["CSDFR"] < thresholds["CSDFR"]) & 
    (robustnessMetrics["Pearson"] > thresholds["Pearson"]) &
    (robustnessMetrics["Pearson_pval"] < thresholds["Pearson P-value"])
    ]

print("CMFR, CSDFR, and Pearson (CMFR < " + str(thresholds["CMFR"]) + \
      " and CSDFR < " + str(thresholds["CSDFR"]) + " and Pearson > " + str(thresholds["Pearson"]) + \
      " with p < " + str(thresholds["Pearson P-value"]) +"):", 
      len(subset_CMFR_CSDFR),
      "Features")

    
### nRoA and Bias Robust Features ###
subset_nRoA_Bias = robustnessMetrics["Feature"][(
    robustnessMetrics["nRoA"] < thresholds["nRoA"]) & 
    (thresholds["Bias"][0] < robustnessMetrics["Bias"]) & (robustnessMetrics["Bias"] < thresholds["Bias"][1])
    ]

print("nROA and Normalized Bias (nROA < " + str(thresholds["nRoA"]) + " and " + \
      str(thresholds["Bias"][0]) + " < Bias < " + str(thresholds["Bias"][1]) + "):", 
      len(subset_nRoA_Bias),
      "Features")

    
### CCC Robust Features ###
subset_CCC = robustnessMetrics["Feature"][robustnessMetrics["CCC"] > thresholds["CCC"]]
print("CCC (Threshold = " + str(thresholds["CCC"]) + "):", len(subset_CCC), "Features")


### ICC Robust Features ###
subset_ICC = robustnessMetrics["Feature"][robustnessMetrics["ICC"] > thresholds["ICC"]]
print("ICC (Threshold = " + str(thresholds["ICC"]) + "):", len(subset_ICC), "Features")

subset_ICCLower = robustnessMetrics["Feature"][robustnessMetrics["ICC_Lower"] > thresholds["ICC"]]
print("ICC Lower Bound (Threshold = " + str(thresholds["ICC"]) + "):", len(subset_ICCLower), "Features")

subset_ICCUpper = robustnessMetrics["Feature"][robustnessMetrics["ICC_Upper"] > thresholds["ICC"]]
print("ICC Upper Bound (Threshold = " + str(thresholds["ICC"]) + "):", len(subset_ICCUpper), "Features")


### All Metrics Robust Features ###
combineSubsets = [subset_MFR_SDFR,
                  subset_CMFR_CSDFR,
                  subset_nRoA_Bias,
                  subset_CCC,
                  subset_ICC,
                  # subset_ICCLower,
                  # subset_ICCUpper
                  ]

merged = reduce(lambda left, right: pd.merge(left, right, on = 'Feature', how = 'inner'), combineSubsets)["Feature"]

print("All Metrics: ", len(merged), "Features")


### Save to CSV ###
robustFeatures = pd.concat([
    robustnessMetrics["Feature"].reset_index(drop = True),
    subset_MFR_SDFR.reset_index(drop = True),
    subset_CMFR_CSDFR.reset_index(drop = True),
    subset_nRoA_Bias.reset_index(drop = True),
    subset_CCC.reset_index(drop = True),
    subset_ICC.reset_index(drop = True),
    subset_ICCLower.reset_index(drop = True),
    subset_ICCUpper.reset_index(drop = True),
    merged.reset_index(drop = True)
    ], axis = 1)

robustFeatures.columns = ["No Metrics", "MFR-SDFR", "CMFR-CSDFR", "nRoA-Bias", "CCC", "ICC", "ICC_Lower", "ICC_Upper", "All Metrics"]
robustFeatures.to_csv(os.path.join(perturbationPath, "robustFeatures.csv"))