"""
This script performs an analysis of the stability of feature selection on the
robust feature subsets.

INPUT: Configurations of the experiment are specified at the beginning of the 
script. Here, one can specify:
    Metric used to quantify selection stability.
    Path to the image perturbation experiments containing the robust feature 
    subsets (as generated by getRobustFeatures.py).
    Which robustness metrics to evaluate.
    How many samples to draw to estimate selection stability.
    How many features to test selection stability at.

OUTPUT: Excel files containing the selection stability for each metric and 
number of features selected. Each run will be save as a new sheet titled
according to experimentName. Files will be saved under the experiment folder 
for each perturbation experiment analyzed.

Written by Abbas Shaikh, Summer 2023
"""

import os
import pandas as pd
import numpy as np
import scipy

from sklearn.utils import resample
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from imblearn.combine import SMOTETomek
from imblearn.over_sampling import SMOTE

from sklearn.feature_selection import SelectKBest, RFE, SequentialFeatureSelector, mutual_info_classif, f_classif
from mrmr import mrmr_classif
from boruta import BorutaPy

from Classification.util import loadClassificationData

### Configurations ###
# stabilityMetric = lambda a, b: scipy.stats.pearsonr(a, b).statistic # Pearson
# stabilityMetric = lambda a, b: scipy.spatial.distance.jaccard(a, b) # Jaccard
stabilityMetric = lambda a, b: 2 * sum (a * b == True) / (sum(a == True) + sum(b == True)) # Dice

metrics = ["MFR-SDFR", "CMFR-CSDFR", "nRoA-Bias", "CCC", "ICC2", "No Metrics"]
scaler = StandardScaler()
numResamples = 100
numFeatures = range(1, 51)

experimentName = "ANOVA"
perturbationExperiments = "D:\BAP1\Experiments\FeatureRobustness"


### Loading Data and Labels ###
experimentPath = r"D:\BAP1\Experiments\FeatureExtraction\FullFeatureExtraction"
labelsPath =  r"D:\BAP1\Data\BAP1Labels.csv"
labelType = "Mutation"

X, y = loadClassificationData(os.path.join(experimentPath, "features.csv"),
                                labelsPath, labelType = labelType)

# Balance Dataset
smt = SMOTETomek(random_state = 100)
X, y = smt.fit_resample(X, y)


### Generate Samples of Dataset ###
X_resamples = []
y_resamples = []

for idx in range(numResamples):
    
    # Get sample and rescale feature values
    X_sample, y_sample = resample(X, y, random_state = idx)
    X_sample.loc[:] = scaler.fit_transform(X_sample)
    
    X_resamples.append(X_sample)
    y_resamples.append(y_sample)
 
    
### Get Feature Stability ###

# Iterate over all perturbation experiments
perturbationExperiments = "D:\BAP1\Experiments\FeatureRobustness"
for subdir, dirs, files in os.walk(perturbationExperiments):
    for expDir in dirs:
        
        print("Experiment:", expDir)
    
        # Load robust feature subsets
        featureRobustness = pd.read_csv(os.path.join(subdir, expDir, "robustFeatures.csv"))
        
        # Iterate over all stability metrics
        featureStability = {metric: [] for metric in metrics}
        for metric in metrics:
            
            print("Testing Metric:", metric)
            robustFeatures = featureRobustness[metric].dropna()
            print(len(robustFeatures), "Total Features")
            
            # For each number of features selected
            for num in numFeatures:
                
                # For each sample of dataset
                selectedFeatureVectors = []
                for idx in range(numResamples):
                    
                    # Select feature subset
                    X_robust = X_resamples[idx][X_resamples[idx].columns.intersection(robustFeatures)]
                    
                    ## ANOVA Feature Selection
                    featureSelector = SelectKBest(k = num, score_func = f_classif)
                    featureSelector.fit(X_robust, y_resamples[idx])
                    binary = featureSelector.get_support()
                    
                    ## mRMR Feature Selection
                    # selectedFeatures = mrmr_classif(X = X_robust, y = y_resamples[idx], K = num, show_progress = False)
                    # binary = X_robust.columns.isin(selectedFeatures)
                    
                    # Convert to binary feature selection vector
                    featureVec = np.zeros(len(featureRobustness["No Metrics"]))
                    featureVec[0:len(robustFeatures)] = binary
                    selectedFeatureVectors.append(featureVec)
                 
                # Get pairwise Pearson coefficients
                pairwiseStability = []
                for i in range(numResamples):
                    for j in range(i + 1, numResamples):
                        pairwiseStability.append(stabilityMetric(selectedFeatureVectors[i], selectedFeatureVectors[j]))
                 
                print(np.mean(pairwiseStability))   
                 
                # Get feature stabiliyt measure
                # print("Mean Stability with", num, "Feature(s):", np.mean(pairwiseStability))
                featureStability[metric].append(np.mean(pairwiseStability))
            
        print()
            
        # Save to Excel File
        stabilityDF = pd.DataFrame.from_dict(featureStability)
        stabilityDF.insert(value = numFeatures, column  = "Number of Features", loc = 0)
        
        outPath = os.path.join(subdir, expDir, "featureStability.xlsx")
        if os.path.isfile(outPath):
            writer = pd.ExcelWriter(outPath, engine = "openpyxl", mode = "a")
        else:
            writer = pd.ExcelWriter(outPath, engine = "openpyxl", mode = "w")
        stabilityDF.to_excel(writer, sheet_name = experimentName, index = False)
        writer.close()